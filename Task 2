#include <iostream>
using namespace std;

//Task 2

void printMatrix(int** matrix, int rows, int cols) {
    cout << "matrix:" << endl;
    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            cout << matrix[i][j] << " ";
        }
        cout << endl;
    }
}

void transposeMatrix(int**& matrix, int& rows, int& cols) {
    int** transposedMatrix = new int* [cols];
    for (int i = 0; i < cols; i++) {
        transposedMatrix[i] = new int[rows];
    }

    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            transposedMatrix[j][i] = matrix[i][j];
        }
    }

    cout << "original matrix:" << endl;
    printMatrix(matrix, rows, cols);

    cout << "transposed matrix:" << endl;
    printMatrix(transposedMatrix, cols, rows);

    for (int i = 0; i < rows; i++) {
        delete[] matrix[i];
    }
    delete[] matrix;

    matrix = transposedMatrix;
    swap(rows, cols);
}

int main() {
    int rows, cols;

    cout << "enter the number of rows: ";
    cin >> rows;

    cout << "enter the number of columns: ";
    cin >> cols;

    int** matrix = new int* [rows];
    for (int i = 0; i < rows; i++) {
        matrix[i] = new int[cols];
    }

    cout << "enter the elements of the matrix:" << endl;
    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            cin >> matrix[i][j];
        }
    }

    transposeMatrix(matrix, rows, cols);

    for (int i = 0; i < rows; i++) {
        delete[] matrix[i];
    }
    delete[] matrix;

    
}
